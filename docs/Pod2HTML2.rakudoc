=begin pod

=TITLE Rendering Rakudoc (aka POD6) into HTML

=SUBTITLE Renders Rakudoc sources into HTML using templates and plugins

A Rakudoc (once called POD6) document is rendered by Raku into a structure called a Pod-tree. A Pod-tree
can also be constructed from the Rakudoc used to document a Raku program.

Pod::To::HTML2 converts the Pod-tree into an HTML file, or a fragment of Rakudoc into a fragment of HTML.

Pod::To::HTML2 is a subclass of B<ProcessedPod>, which contains significantly more information about the Rakudoc
in a file. See L<the documentation of PodRender|PodRender> for more detail.

See the sister L<Pod::To::MarkDown|Markdown> class for rendering a Rakudoc file to MarkDown.

A Pod-tree consists of Pod::Blocks. The contents and metadata associated with each block is passed
to a template with the same name as the block.

Templates are stored separately from the code in C<Pod::To::HTML2> and so can be tweaked by the user.

Rakudoc can be customised by creating new named blocks and FormatCodes (see Raku documentation on POD6).
The C<Pod::To::HTML2> class enables the creation of new blocks and FormatCodes via L<plugins|#Plugins>.
Several non-standard Blocks are included to show how this is done.

The rationale for re-writing the whole B<Pod::To::HTML> module is in the section L<Why Reinvent the Wheel?|#Why Reinvent the Wheel?>.

C<Pod::To::HTML2> implements three of the subs in C<Pod::To::HTML>, namely:
=item node2html <pod block> # convert a string of pod to a string of html
=item pod2html <pod tree> # converts a pod block to a string of html
=item render # converts a file to html

However, C<pod2html> and C<render> have a variety of options that are not supported by HTML2 because
they depend on Mustache templates and the plugins for HTML2 have not yet been fully completed to work
with Mustache templates. This is a TODO.

A utility called C<Rakudoc-to-html> is included in the distribution to transform a local Rakudoc file#
to HTML. Try C<Rakudoc-to-html Example> in an empty directory! See below for more information.

=head1 Requirements for HTML

To render a Rakudoc file into HTML, the following are needed:
=item Content in the form of a Pod-tree, OR a filename containing Rakudoc, which is then converted
to a Pod-tree

=item templates that will generate HTML for each Pod Block
=item a favicon file
=item CSS content for rendering the HTML
=item images referenced in the CSS or content
=item Javascript or JQuery programs and libraries.

The HTML file must then be served together with the CSS, favicon.ico, script and image assets.
This can be
done in many different ways, eg, with a Cro App, but each has a different set of dependencies.
It is assumed the user will know how to serve files once generated.

=head1 Simple usage

This distribution assumes a user may want simplicity in order
=item to quickly render a single Rakudoc file
=item to tweak/provide any of the templates, favicon, CSS
=item add plugins to create custom blocks
=item include the C<=Image> named block and reference an image.

Anything more complex, such as another destination directory or handling more than one Rakudoc file,
needs to be done by instantiating the underlying classes. An more complex example is the C<Collection>
module, which adds even more plugins. B<Collection> I<render> plugins can be adapted for
C<Pod::To::HTML2>.

The utility C<Rakudoc-to-html> in this distribution will render a Rakudoc file.

The utility creates the following in the directory where Rakudoc-to-html was called:
=item an html file with the same name as the Rakudoc file;
=item a sub-directory C<assets_files> if not already present with:
=item2 an C<images> subdirectory with
=item3 C<favicon.ico> file, if it is B<not> already present;
=item3 the file C<Camelia.svg> if it is B<not> already present;
=item3 images defined by plugins or L<user images|#Image management>.
=item2 a CSS subdirectory with:
=item3 C<rakudoc-styling.css> if it is B<not> already present;
=item3 css files defined for L<plugins|#Plugins>;
=item2 a sub-directory C<js> for js and jQuery scripts defined by plugins.

The default templates, favicon, plugins and rakudoc-styling css are installed when this
distribution is installed into a directory called
C<$*HOME/.local/share/RenderPod>.
(See L<Defaults and customisation|#Defaults and customisation> for more detail.)

If files for html (See L<Default and customisation|#Default and customisation>) are present
in the current working directory, they will be used in place of the defaults
in C<$*HOME/.local/share/RenderPod>.

The recommended way to customise the templates/favicon/css/plugin files is to create an empty
directory, use C<Rakudoc-to-html get-local> to all plugins and templates from the default directory
to the empty directory, modify them, then call
C<Rakudoc-to-html rakudoc-source.rakudoc> in that directory (source could include a path). The HTML file
and its associated assets will be generated in the directory.

Plugins that don't need to be modified can be deleted locally.

If the Pod::To::HTML2 class is instantiated, or the Pod::To::HTML2 functions are used, then the default
assets can be used, or taken from files in the Current Working Directory.

=head1 Other templating systems

Three sets of the main default templates are available for the three templating engines automatically detected
in this distribution:
=item C<RakuClosure> template system, (default choice)
=item C<Mustache> templating engine, (plugins do not work with Mustache) and
=item C<Cro::WebApp::Template> engine (the interface with Crotmp is not fully developed).

The templating engine can be selected
by calling C<Rakudoc-to-html> with the C<type> option set to
=item B<crotmp> eg., C< Rakudoc-to-html --type=crotmp>
=item B<mustache>, eg., C<Rakudoc-to-html --type='mustache'>.
=item B<rakuclosure>, eg., C<Rakudoc-to-html --type='rakuclosure'>.

It is possible to change the templates in a plugin to match the main templating engine. Plugins
templates are specified for RakuClosureTemplates. But if there is a key 'RakuClosureTemplater',
the templates will be taken from the Hash it points to. Then keys for other templating
engines can also be included.

Todo: the plan is to include templates for each templating engine in the common plugins.

=head1 Usage with compiler

From the terminal:
=begin code :lang<shell>
raku --doc=HTML2 input.raku > output.html
=end code

This takes the Rakudoc (aka POD6) in the C<input.raku> file, transforms it into HTML,
outputs a full HTML page including a Table of Contents, Glossary and Footnotes.
As described in L<Simple Usage|#Simple Usage>, the C<favicon.ico>, C<rakudoc-styling.css>,
image and additional CSS files are placed in subdirectories of the Current working directory.

This will only work with C<rakuclosure> templates.

=head2 Component options

Some rendering options can be passed via the RAKOPTS Environment variable.
=item The TOC, Glossary (Index), Meta and Footnotes can be turned off.

=begin code :lang<shell>
RAKOPTS='NoTOC NoMETA NoGloss NoFoot' raku --doc=HTML2 input.raku > output.html
=end code

The following regexen are applied to the contents of the RAKOPTS environment variable
and if one or more matchd, they switch off the default rendering of the respective section:

=begin table :caption('Regexen and Page Component')
regex applied |  if Match, then Turns off
============================================
/:i 'no' '-'? 'toc' / | Table of Contents
/:i 'no' '-'? 'meta' / | Meta information (eg AUTHOR)
/:i 'no' '-'? 'glossary' / | Glossary
/:i 'no' '-'? 'footnotes' / | Footnotes.
=end table

Any or all of 'NoTOC' 'NoMETA' 'NoGloss' 'NoFoot' may be included in any order.
Default is to include each section.

=head2 Plugins options

Setting the Environment variable C<PLUGINS> to a list of plugins will invoke only those
plugins.

For example, if only the Graphviz plugin, and no other, is required, then use
=begin code :lang<shell>
PLUGINS='Graphviz' raku --doc=HTML2 input.raku > output.html
=end code

=head1 Rakudoc-to-html

This is invoked on the command line as

    Rakudoc-to-html input.rakudoc

The options are mostly like those for the compiler, and are:
=item --rakopts # like RAKOPTS
=item --plugins # like PLUGINS
=item --type # default is 'rakuclosure', see L<templates|#Templates>)

=head2 Examples and plugins

C<Rakudoc-to-html> can also be called to get an example Rakudoc file, and to get local versions
of plugins.

    Rakudoc-to-html Example

will bring in the default files and a document called C<Samples.rakudoc>, which is then
transformed to HTML.

    Rakudoc-to-html get-local

will move the customisable (but not the core transfer plugins) to the local directory.
Any sub-directory without a '_' in its name is considered a plugin (hence the name
for the asset files directory C<asset_files>).

Local plugins take precedence over default plugins.

=head1 Defaults and customisation

The directory C<$*HOME/.local/share/RenderPod> contains the following files:
=item html-templates-rakuclosure.raku # templates in Rakuclosure form to convert Rakudoc to HTML
=item html-templates-mustache.raku # ditto for mustache
=item html-templates-crotmp.raku # ditto for crotmp
=item simple-extras/ # plugin for simple additions to Rakudoc
=item graphviz/ # plugin to allow for graphviz files
=item latex-render/ # plugin to render math equations in Latex syntax to an image
using a free on-line renderer.

=item styling/ # a customisable plugin containing the source for the css files and
images for styling the Rakudoc html files. The plugin directory contains the following,
which are transferred using C<move-assets>.

=item2 rakudoc-styling.css # the css to be associated with the HTML
=item2 _highlight.scss # highlights source, used by next
=item2 rakudoc-styling.scss # the scss source for the css file (this is not used by
Pod::To::HTML2 but is included for ease of use). Converting scss to css can be found by
internet searching. SASS is a good utility.

=item2 favicon.ico # the favicon file

=item gather-js-jq/ # a special plugin for including js and jquery scripts in plugins.
The plugin has a README, which provides more information about the various
js/jq config keys.

=item gather-css/ # a special plugin for including css in plugins. The plugin has a README,
which provides more information about the various css config keys.

=item move-assets/ # a core plugin for moving assets from another plugin to the C<asset_files>
sub-directory.

=item md-templates-rakuclosure.raku, etc. markdown files. They are
not relevant for html rendering (see Pod::To::Markdown for more detail)

=head2 Template file

A template file must contain the minimum number of templates (see L<RenderPod> for more detail).

The template file must evaluate to a Raku B<Associative> type, eg. Hash.

The C<_templater> key (see one of the files for an example) defines which templating system is used.

The plugins are not guaranteed to have template systems other than C<rakuclosure>. Template systems
cannot be mixed.

=head1 Plugins

A plugin is in a directory with the same name. A plugin name must start with a letter and contain
any letter, number, or '-' characters. It may not contain a '_' after the first letter.

The following plugins are called by default, unless explicitly removed (by passing
a plugins list without one or all of them):
=item simple-extras
=item graphviz
=item latex-render

Two special plugins are included in the defaults directory. Their contents are used by
C<Pod::To::HTML2> directly from the defaults directory. Copying them to a local directory
will not have an effect. Its not a good idea to change them without reading the plugin
documentation for the C<Collection> module. They are:
=item gather-css
=item gather-js-jq

Each plugin contains a README file, which may provide more detail.

A plugin must contain
=item the file C<config.raku>
=item files named in C<config.raku>
=item The config B<must> contain the following keys
=item2 template-raku # can be an empty string, otherwise a file for templates
=item2 custom-raku #  can be an empty string, otherwise a file for custom blocks
=item The config B<may> contain the following
=item2 css # a file containing css, which will be merged into C<rakudoc-extra.css>
=item2 css-add # a file to be transfered to CWD
=item2 css-link # a url for a style sheet
=item2 js-script # this must be either a String, or point to a [string name, ordering] array.
=item2 jquery # ditto
=item2 js-link # ditto
=item2 jquery-link # ditto

More information about the js/jquery keys can be found in C< <defaults>/gather-s-q>

The file pointed to by the C<template-raku> key is a raku program that evaluates to an
Associative (eg., Hash) with keys pointing to templates. Plugins currently only use the
C<rakuclosure> system. More detail can be found in L<RakuClosureTemplates>.

The file pointed to by the C<custom-raku> key is a raku program that evaluates to a Positional
(eg., Array). This is the list of names for the custom blocks. The templates should be
the lower case names provided by the custom-raku list.

The default plugins provide examples.

=head1 Standalone usage mixing Pod and code

'Standalone ... mixing' means that the program itself contains pod definitions (some examples are given below).
This functionality is mainly for tests, but can be adapted to render other pod sources.

C<Pod::To::HTML2> is a subclass of C<PodProcessed>, which contains the code for a generic Pod Render.
C<Pod::To::HTML2> provides a default set of templates and minimal css (see L<Templates|#Templates>). It also
exports some routines (not documented here) to pass the tests of the legacy C<Pod::To::HTML2> module (see below
for the rationale for choosing a different API).

C<Pod::To::HTML2> also allows, as covered below, for a customised css file to be included, for individual template components to be
changed on the fly, and also to provide a different set of templates.

What is happening in this case is that the raku compiler has compiled the Pod in the file, and the code then accesses the Pod segments.
In fact the order of the Pod segments is irrelavant, but it is conventional to show Pod definitions interwoven
with the code that accesses it.

=begin code :lang<raku>
use Pod::To::HTML2;
# for repeated pod trees to be output as a single page or html snippets (as in a test file)
my $renderer = Pod::To::HTML2.new(:name<Optional name defaults to UNNAMED>);
# later

=begin pod
some pod
=end pod

say 'The rendered pod is: ', $renderer.render-block( $=pod );

=begin pod

another fact-filled assertion

=end pod

say 'The next pod snippet is: ', $renderer.render-block( $=pod[1] );
# note that all the pod in a file is collected into a 'pod-tree', which is an array of pod blocks. Hence
# to obtain the last Pod block before a statement, as here, we need the latest addition to the pod tree.

# later and perhaps after many pod statements, each of which must be processed through pod-block

my $output-string = $renderer.source-wrap;

# will return an HTML string containing the body of all the pod items, TOC, Glossary and Footnotes.
# If there are headers in the accumulated pod, then a TOC will be generated and included
# if there are X<> type references in the accumulated pod, then a Glossary will be generated and included

$renderer.file-wrap(:output-file<some-useful-name>, :ext<html>);
# first .source-wrap is called and then output to a file.
# if ext is missing, 'html' is used
# if C<some-useful-name> is missing, C<name> is used, which defaults to C<UNNAMED>
# C<some-useful-name> could include a valid path.

=end code

=head1 Custom blocks

The Rakudoc specification allows for Pod::Blocks to be named and meta data associated with it.
This allows us to leverage the standard syntax to allow for non-standard blocks and templates.

Briefly, the name of the Block is placed in C<html-blocks> (case is not important), and
a template with the same name (B<must> be lower case), is placed in the C<html-templates-xxx.raku>
file (the B<xxx> depending on which templating system is used). Note, changes need only be made
to the file with the templating system the user wants and specifies with the C<--type> option.

In keeping with other named blocks, I<Title> case may be conventionally used for the block name
and I<Lower> case is required for the template.

Some examples are provided in the default templates. They are
=item C<Image> custom block and provides the C<image> template. The actual images should be
in the C<assets/images> sub-directory. It is up to the user to do this.

=item C<HR>. This adds a xxxish-dots class to C< <hr> > HTML elements.
=item C<Quotation>. This formats content with an indentation, and adds both
author and citation components.

=item C<Latex-render>
=item C<Graphviz>

=head2 Latex-render

When an equation is given in a Latex syntax after a C<Latex> block, the description of the equation
is sent to an online renderer, and the image is inserted into the html. Eg.
=begin code
    =for Latex
    \begin{align*}
    \sum_{i=1}^{k+1} i^{3}
    &= \biggl(\sum_{i=1}^{n} i^{3}\biggr) +  i^3\\
    &= \frac{k^{2}(k+1)^{2}}{4} + (k+1)^3 \\
    &= \frac{k^{2}(k+1)^{2} + 4(k+1)^3}{4}\\
    &= \frac{(k+1)^{2}(k^{2} + 4k + 4)}{4}\\
    &= \frac{(k+1)^{2}(k+2)^{2}}{4}
    \end{align*}

=end code

It is assumed that there is internet connectivity to the online engine.

=head Graphviz

When a description of a digraph in the dot syntax is given between bracketing elements,
then an image is generated in the html, eg.
=begin code
    =begin Graphviz
        digraph G {
            main -> parse -> execute;
            main -> init;
            main -> cleanup;
            execute -> make_string;
            execute -> printf
            init -> make_string;
            main -> printf;
            execute -> compare;
        }
    =end Graphviz
=end code

The assumption is that the C<dot> utility is installed.

More information on C<dot> and C<graphviz> can be found at L<Graphviz|https://www.graphviz.org/>

The files <rakudoc-styling.css> and <favicon.ico> can be replaced completely. If they are
present in the current directory, they will not be overwritten.

=head1 Adding customisation programmatically

Suppose we wish to have a diagram block with a source and to assign classes to it.
We want the HTML container to be C<figure>.

In the Rakudoc source code, we would have:
=begin code
    =for diagram :src<https://someplace.nice/fabulous.png> :class<float left>
    This is the caption.
=end code

Note that the C<for> takes configuration parameters to be fed to the template, and ends at the first
blank line or next C<Pod::Block>, that is a line begining with C<=>.

Then in the rendering program we need to provide to the C<ProcessedPod> class
the new object name, and the corresponding template (in B<this> example, the C<Mustache> system is
used, which means all the other templates must be in C<Mustache>).

The Block name and template must be the same name. Thus we would have:
=begin code
    use v6;
    use Pod::To::HTML2;
    my Pod::To::HTML2 $r .= new;
    $r.custom = <diagram>;
    $r.modify-templates( %( diagram => '<figure source="{{ src }}" class="{{ class }}">{{ contents }}</figure>' , ) );
=end code

=head1 Highlighting

Generally it is desirable to highlight code contained in C< =code > blocks. While perhaps this may be done in-Browser,
it can be done at HTML generation, via the Templates and a highlighter function.

This distribution, C<Raku::Pod::Render>, by default sets up the atom-highlighter
stack (installation dependencies can be found in L<README>).

Since highlighting generates considerably more HTML, it is turned off by default, which will affect the C< --doc=HTML > compiler option.

Highlighting is handled in the Templates. The default Templates use the atom-highlighter, which is installed with
C<Raku::Pod::Render> by default.

Highlighting is enabled at the time of HTML generation by setting C<$render.highlight-code=True> after C<Pod::To::HTML2> object
instantiation.

Another highlighter could be attached to a Pod::To::HTML2 object, in which case the following need to be done:
=item the getter and setter functions of C<.highlight-code> need to be over-ridden so as to set up the code, and turn it off
=item a closure needs to be assigned to C< .highlight >. The closure should accept a Str and highlight it.
=item the C<Pod::To::HTML2> object has an attribut C< .atom-highlighter> of type C<Proc> to hold an external function.

The C<atom-highlighter> automatically escapes HTML entities, but so does C<GenericPod>. Consequently, if a different highlighter
is used for highlighting when HTML is generated, escaping needs to be turned off within GenericPod for Pod::Code blocks.
This is the default behaviour. If a different behaviour is required, then C<no-code-escape> needs to be set to False.

=head1 Templates

The default templating system is a hash of Raku closures. More about templates can be found in L<RenderPod>. Another template
engine is Template::Mustache. This can be accessed as C<use Pod::To::HTML2::Mustache>.
A minimal default set of templates is provided with the Module.

Each template can be changed using the C<modify-templates> method. Be careful when over-riding C<head-block> to ensure
the css is properly referenced.

A full set of new templates can be provided to ProcessedPod either by providing a path/filename to the processor method, eg.,

=begin code
use Pod::To::HTML2;
my Pod::To::HTML2 $p .= new;

$p.templates<path/to/mytemplates.raku>;

# or if all templates known

$p.templates( %( format-b => '<b>{{ contents }}</b>' .... ) );

=end code

If :templates is given a string, then it expects a file that can be compiled by raku and evaluates to
a Hash containing the templates. More about the hash can be found in L<RenderPod|renderpod>.

=head1 Exported Subroutines

Two functions are exported to provide backwards compatibility with legacy Pod::To::HTML module.
They map onto the methods described in C<PodRender>.

Only those options actually tested will be supported.

=item node2html

    sub node2html( $pod ) is export

=item pod2html

    sub pod2html( $pod, *%options ) is export

=head1 Why Reinvent the Wheel?

The two original Pod rendering modules are C< Pod::To::HTML2 > (later B<legacy P2HTML> ) and C< Pod::To::BigPage >. So why
rewrite the modules and create another API? There was an attempt to rewrite the existing modules, but the problems go deeper
than a rewrite. The following difficulties can be found with the legacy Modules:

=item Inside the code of
legacy P2HTML there were several comments such as 'fix me'. The API provided a number of functions with different parameters that
are not documented.

=item Not all of the API is tested.

=item One or two POD features are not implemented in legacy P2HTML, but are implemented in P2BigPage.

=item Fundamentally: HTML snippets for different Pod Blocks is hard-coded into the software. Changing the
structure of the HTML requires rewriting the software.

=item Neither module deals with Indexes, or Glossaries. POD6 defines the B<X< >> format code to place text in a glossary (or index),
but this information is not collected or used by P2HTML. The Table of Content data is not collected in the same pass through the
document as the generation of the HTML code.

This module deal with these problems as follows:

=item All Pod Blocks are associated with templates and data for the templates. So the Generic Renderer passes off generation of
the output format to a Template engine. (Currently, only the Template::Mustache engine is supported, but the code has been
designed to allow for other template engines to be supported by over-ridding only the template rendering methods).

=item Data for B<Page Components> such as C<Table of Contents>, C<Glossary>, C<Footnotes>, and C<MetaData> are collected in a single
processing pass of the Generic Renderer. The subclass can provide templates for the whole document to incorporate the Page Components
as desired.

=item All the links (both external and internal) are collected together and can be accessed after processing the Pod source,
thus allowing for testing of the links separately.

=item There is a clear distinction between what is needed for a particular output format, eg., HTML or MarkDown, and what is
needed to render Pod. Thus, HTML requires css and headers, etc. MarkDown requires the anchors to connect a Table of Contents
to specific Headers in the text to be written in a specific way.

=end pod